
import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.plugins.signing.Sign

plugins {
    id 'java'
    id 'groovy'
    id 'application'
    id 'eclipse'
    id 'idea'
    id 'findbugs'
    id 'signing'
    id 'maven-publish'
    id "com.github.ethankhall.semantic-versioning" version "1.1.0"
    id "com.github.ben-manes.versions" version "0.13.0"
    id "com.jfrog.bintray" version "1.7.2"
    id "org.asciidoctor.convert" version "1.5.3"
    id "org.ajoberstar.git-publish" version "0.1.0"
    id "com.github.hierynomus.license" version "0.12.1"
    id "net.saliman.properties" version "1.4.6"
    id 'com.github.jk1.dependency-license-report' version '0.3.8'
}

project.version.with {
    major = ghapiTestVersionMajor as int
    minor= ghapiTestVersionMinor as int
    patch = ghapiTestVersionPatch as int
    if (project.hasProperty('ghapiTestVersionLabel')) {
        preRelease = ghapiTestVersionLabel
    }
    releaseBuild = Boolean.valueOf(ghapiTestReleaseBuild)
}
ext.ghapiTestVersion = project.version as String
ext.ghapiTestTag = Boolean.valueOf(ghapiTestReleaseBuild) ? "v$ext.ghapiTestVersion" : 'master'

repositories {
  jcenter()
  mavenCentral()
}

def pomConfig = {
    url "https://github.com/to-be-deleted/ghapi-test"
    developers {
    }
    scm {
        connection "https://github.com/to-be-deleted/ghapi-test.git"
        developerConnection "https://github.com/to-be-deleted/ghapi-test.git"
        url "https://github.com/to-be-deleted/ghapi-test"
    }
}

ext.groovyVersion = '2.4.7'


group = 'org.beryx'
version = ghapiTestVersion

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:all,-syntax,-missing', '-quiet')
}






repositories {
    jcenter()
    mavenCentral()
}

sourceCompatibility = 1.8

def defaultEncoding = 'UTF-8'
[compileJava, compileTestJava]*.options*.encoding = defaultEncoding

configurations {
  provided
  compile {transitive = true}
}

license {
    header rootProject.file("license-header.txt")
    skipExistingHeaders true
    ignoreFailures false
}


signing {
    sign configurations.archives
}

signArchives {
  onlyIf { gradle.taskGraph.allTasks.findAll {task -> isPublishTask(task)} }
}

dependencies {
  
  compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'
  runtime ('ch.qos.logback:logback-classic:1.1.7')
  provided 'com.google.code.findbugs:findbugs-annotations:3.0.1'
  
  
  testCompile "org.codehaus.groovy:groovy-all:$groovyVersion"
  testCompile('org.spockframework:spock-core:1.1-groovy-2.4-rc-2') {
      exclude module: 'groovy-all'
  }
  testCompile 'cglib:cglib-nodep:3.2.4'
  testCompile 'org.objenesis:objenesis:2.4'
  testCompile('com.athaydes:spock-reports:1.2.13') { transitive = false}
  
  
  testCompile('ch.qos.logback:logback-classic:1.1.7')
}

sourceSets.main.compileClasspath += configurations.provided
findbugs {
    effort = "max"
    excludeFilter = file("$rootProject.projectDir/findbugsExclude.xml")
}
jar {
    manifest {
        attributes 'Implementation-Title': "${project.archivesBaseName}",
                'Implementation-Version': ghapiTestVersion
    }

    from ("${projectDir}/src/main/java") {
        include('**/*.fxml')
        include('**/*.css')
        include('**/*.png')
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: classes) {
    classifier "javadoc"
    from javadoc
}
artifacts {
    (System.getenv("TRAVIS") == "true") ? archives(sourcesJar) : archives(sourcesJar, javadocJar)
}

publishing {
    publications {
        "ghapi-test"(MavenPublication) {
            from components.java
            artifact sourcesJar { classifier "sources" }
            artifact javadocJar { classifier "javadoc" }
            groupId 'org.beryx'
            artifactId project.name
            version ghapiTestVersion
            pom.withXml {
                def root = asNode()
                root.appendNode('name', "Module $project.name")
                root.appendNode('description', "The $project.name artifact")
                root.children().last() + pomConfig

                // We cannot configure the licenses in pomConfig due to a name conflict with the 'license' extension defined by the com.github.hierynomus.license plugin
                def licenseNode = root.appendNode('licenses').appendNode('license')
                licenseNode.appendNode('name', 'The Apache Software License, Version 2.0')
                licenseNode.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                licenseNode.appendNode('distribution', 'repo')
            }
        }
    }
}

task "create-dirs" {
    doLast {
        sourceSets*.java.srcDirs*.each { it.mkdirs() }
        
        sourceSets*.resources.srcDirs*.each { it.mkdirs() }
    }
}

eclipse {
    classpath {
        file {
            whenMerged {
                def jre = entries.find { it.path.contains 'org.eclipse.jdt.launching.JRE_CONTAINER' }
                jre.accessRules.add(new org.gradle.plugins.ide.eclipse.model.AccessRule('0', 'javafx/**'))
            }
        }
        plusConfigurations << configurations.provided
    }
    project {
        file.beforeMerged { project ->
            project.natures.clear()
        }
    }
}

idea {
    module {
        scopes.PROVIDED.plus += [configurations.provided]
    }
}

def gitIgnore = file(".gitignore").readLines()
def gitIgnoreDirs = gitIgnore*.trim().findAll { !it.startsWith("#") && it.endsWith("/") }
asciidoctor {
  sourceDir = file("doc")
  sources {include 'index.adoc'}
  logDocuments = true
  attributes 'source-highlighter': 'coderay',
             'coderay-linenums-mode': 'table',
             icons: 'font',
             imagesdir: 'img',
             'data-uri': '',
             linkattrs: true,
             linkcss: true,
             'git-tag': ghapiTestTag,
             'blob-root': "https://github.com/to-be-deleted/ghapi-test/blob/$ghapiTestTag"
}

gitPublish {
    System.properties['org.ajoberstar.grgit.auth.username'] = System.getenv('GH_PAGES_ACCESS_TOKEN') ?: ''
    System.properties['org.ajoberstar.grgit.auth.password'] = ''

    repoUri = 'https://github.com/to-be-deleted/ghapi-test.git'
    branch = 'gh-pages'

    contents {
        def pgType = project.hasProperty('ghPageType') ? ghPageType : 'latest'
        if(pgType == 'init') {
            from file("ghpages")
        } else {
            from file("${asciidoctor.outputDir.path}/html5")
            from file("build/docs")
        }
        def docDir = Boolean.valueOf(ghapiTestReleaseBuild) ? 'releases' : 'snapshots'
        if(pgType == 'init') {
            into "."
        } else if(pgType == 'version') {
            gitPublishPush.enabled = (docDir != 'snapshots')
            into "$docDir/$ghapiTestVersion"

            preserve {
                include '**'
                exclude "$docDir/$ghapiTestVersion"
            }
        } else {
            into "$docDir/latest"

            preserve {
                include '**'
                exclude "$docDir/latest"
            }
        }
    }
}  



artifacts {
    (System.getenv("TRAVIS") == "true") ? archives(sourcesJar) : archives(sourcesJar, javadocJar)
}
jar {
    manifest {
        attributes 'Main-Class': 'org.beryx.ghapi.GhapiTestMain'
    }
}
mainClassName = 'org.beryx.ghapi.GhapiTestMain'

applicationName = "ghapiTest"

startScripts {
    defaultJvmOpts = ['-Dlogback.configurationFile=logback.xml']
}

applicationDistribution.from("${rootProject.projectDir}/dist") {
    filter(ReplaceTokens, tokens:[ghapiTestVersion : ghapiTestVersion])
}

applicationDistribution.from("${rootProject.projectDir}/..") {
    include('LICENSE', 'NOTICE')
}



configureJavadoc(javadoc)

def configureJavadoc(task) {
  configure(task) {
      title "ghapi-test Documentation ($ghapiTestVersion)"
      destinationDir file("build/docs/javadoc")
      if(project.configurations.hasProperty('provided')) {
          classpath += project.configurations.provided
      }
      configure(options) {
          links "http://docs.oracle.com/javase/8/docs/api/"
      }
  }
}

def readFromConsole(prompt) {
    readFromConsole('', prompt)
}
def readFromConsole(header, prompt) {
    readFromConsole(header, prompt, false)
}
def readPasswordFromConsole(prompt) {
    readPasswordFromConsole(prompt, true)
}
def readPasswordFromConsole(header, prompt) {
    readFromConsole(header, prompt, true)
}
def readFromConsole(header, prompt, isPassword) {
    def console = System.console()
    if (console) {
        if(header) {
            console.printf "\n\n# $header\n"
        }
        String value = null;
        while(!value?.trim()) {
            def val = console."read${isPassword ? 'Password' : 'Line'}"("> $prompt: ")
            if(val) {
                value = new String(val)
            }
        }
        return value
    } else {
      throw new GradleException("Cannot get console. Try running gradle with the '--no-daemon' option")
    }
}

def isPublishTask(task) {
  task.name.startsWith('publish')
}

gradle.taskGraph.whenReady { taskGraph ->
    if (gradle.taskGraph.allTasks.findAll {task -> isPublishTask(task)}) {
        def password = readPasswordFromConsole('Please enter your signing credentials', 'PGP Private Key Password')
        allprojects { ext."signing.keyId" = signingKeyId }
        allprojects { ext."signing.secretKeyRingFile" = signingSecretKeyRingFile }
        allprojects { ext."signing.password" = password }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.getProperty('bintrayUser') : "unknownUser"
    key =  project.hasProperty('bintrayKey') ? project.getProperty('bintrayKey') : "unknownKey"
    publications = ['ghapi-test']
    pkg {
        repo = 'maven'
        name = 'ghapi-test'
        userOrg = 'to-be-deleted'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/to-be-deleted/ghapi-test.git'

        version {
                name = ghapiTestVersion
                desc = "ghapi-test $ghapiTestVersion"
                released  = new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZZ")
                vcsTag = ghapiTestVersion
                gpg {
                    sign = true
                }
        }
    }
}
